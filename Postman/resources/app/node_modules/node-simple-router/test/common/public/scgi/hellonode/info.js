// Generated by CoffeeScript 1.4.0
(function() {
  var fs, handler, net, received, replace_zeros, server, write_res;

  net = require('net');

  fs = require('fs');

  received = "";

  replace_zeros = function(stri, replacement) {
    var i, retval, _i, _ref;
    if (replacement == null) {
      replacement = "@";
    }
    retval = "";
    for (i = _i = 0, _ref = stri.length - 1; 0 <= _ref ? _i <= _ref : _i >= _ref; i = 0 <= _ref ? ++_i : --_i) {
      if (stri.charCodeAt(i) !== 0) {
        retval += stri[i];
      } else {
        retval += replacement;
      }
    }
    return retval;
  };

  write_res = function(conn, obj) {
    var body, head, headers, heads, index, keys, n, thevals, val, vals, _i, _j, _len, _len1;
    conn.write("Status: 200 OK\r\n");
    conn.write("Content-type: text/html\r\n");
    conn.write("\r\n");
    headers = obj.headers;
    body = obj.body;
    conn.write("<h3>HEADERS</h3><hr/>");
    headers = headers.split(/\0/g);
    keys = (function() {
      var _i, _len, _results, _step;
      _results = [];
      for (_i = 0, _len = headers.length, _step = 2; _i < _len; _i += _step) {
        n = headers[_i];
        _results.push(n);
      }
      return _results;
    })();
    thevals = headers.slice(1);
    vals = (function() {
      var _i, _len, _results, _step;
      _results = [];
      for (_i = 0, _len = thevals.length, _step = 2; _i < _len; _i += _step) {
        n = thevals[_i];
        _results.push(n);
      }
      return _results;
    })();
    heads = [];
    for (index = _i = 0, _len = keys.length; _i < _len; index = ++_i) {
      val = keys[index];
      if (keys[index]) {
        heads.push("" + keys[index] + " = " + vals[index] + "<br/>----------------------------------------------<br/>");
      }
    }
    for (_j = 0, _len1 = heads.length; _j < _len1; _j++) {
      head = heads[_j];
      conn.write(head);
    }
    conn.write("<hr/>");
    conn.write("<h3>BODY</h3><hr/>");
    conn.write(body);
    conn.write("<hr/>");
    return conn.end();
  };

  handler = function(conn) {
    received = "";
    return conn.on('data', function(data) {
      var body, bodylen, headers, m, nslen, nsrcvlen, pat, prefix, sans_zeros, totallen;
      sans_zeros = replace_zeros(data.toString('utf8'), '\0');
      received += sans_zeros;
      console.log("RECEIVED " + (replace_zeros(sans_zeros)));
      m = received.match(/^(\d+):/);
      if (m) {
        nslen = parseInt(m[1]);
        prefix = "" + m[1] + ":";
        console.log("PREFIX " + prefix);
        nsrcvlen = received.length - m[1].length - 1;
        if (nsrcvlen >= nslen) {
          pat = /CONTENT_LENGTH\0(\d+)\0/i;
          m = received.match(pat);
          if (m) {
            bodylen = parseInt(m[1]);
            totallen = nslen + bodylen + 1;
            console.log("Netstring length: " + nslen + " - Body length: " + bodylen + " - Total length: " + totallen);
            if (nsrcvlen >= totallen) {
              headers = received.substring(prefix.length, prefix.length + nslen);
              console.log("HEADERS: " + headers);
              if (bodylen > 0) {
                body = received.substring(prefix.length + nslen + 1);
              } else {
                body = "";
              }
              console.log("BODY: " + body);
              return write_res(conn, {
                headers: headers,
                body: body
              });
            } else {

            }
          } else {

          }
        } else {

        }
      } else {

      }
    });
  };

  server = net.createServer({
    allowHalfOpen: true
  }, handler);

  console.log("Serving SCGI on port 26000");

  server.listen(26000);

}).call(this);
